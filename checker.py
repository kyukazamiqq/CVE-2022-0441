import requests
from concurrent.futures import ThreadPoolExecutor
import concurrent.futures
import threading
import random
import string
from colorama import Fore, Style

# Lock untuk mengamankan penulisan ke file save.txt
write_lock = threading.Lock()

def generate_random_header():
    user_agent = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10))
    headers = {
        'User-Agent': f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 {user_agent}'
    }
    return headers

def check_and_save_version(site_url):
    readme_url = f"{site_url}/wp-content/plugins/masterstudy-lms-learning-management-system/readme.txt"
    headers = generate_random_header()
    
    try:
        response = requests.get(readme_url, headers=headers)
        if response.status_code == 200:
            readme_content = response.text
            version_line = next((line for line in readme_content.split('\n') if line.startswith('Stable tag:')), None)
            if version_line:
                version = version_line.split(':')[1].strip()
                if version < '2.7.6':
                    with write_lock:
                        with open('save.txt', 'a') as save_file:
                            save_file.write(f"{site_url}\n")
                            print(f"{Fore.GREEN}{site_url} => [Exploitable]")
                else:
                    print(f"{Fore.RED}{site_url} => [NOTVULNBLAH]{Style.RESET_ALL}\n")
            else:
                print(f"LMS version information not found on {site_url}.")
        else:
            print(f"Error: Unable to fetch plugin information from {site_url}. Status Code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

# Baca daftar situs dari file teks (setiap situs di satu baris)
with open('lms.txt', 'r') as file:
    sites = file.readlines()

# Batasi jumlah thread yang berjalan secara bersamaan menjadi 20
max_threads = 20

with ThreadPoolExecutor(max_workers=max_threads) as executor:
    futures = []
    for site in sites:
        site_url = site.strip()
        future = executor.submit(check_and_save_version, site_url)
        futures.append(future)

    # Tunggu hingga semua task selesai
    concurrent.futures.wait(futures)

print("Pemeriksaan selesai. Hasil disimpan di save.txt.")
